{"pageProps":{"post":{"title":"Web 前端开发风格指南","date":"2015-04-02T15:41:00.000Z","slug":"front-end-web-development-style-guide","content":"<p>风格指南用于统一开发方式与代码书写风格。</p>\n<p>推荐使用 EditorConfig 来配置编辑器，方便编写统一书写风格的代码。同时使用 Lint 来做代码质量检测。</p>\n<h2>基本规范</h2>\n<p>基本规范可引用各语言的社区推荐风格，如：</p>\n<ol>\n<li>Google:<ul>\n<li>Google HTML/CSS Style Guide</li>\n<li>Google JavaScript Style Guide</li>\n</ul></li>\n<li>GitHub:<ul>\n<li>Markup &#x26; Templates Styleguide</li>\n<li>CSS Styleguide</li>\n<li>JavaScript Styleguide</li>\n</ul></li>\n<li>Other:<ul>\n<li>HTML</li>\n<li>CSS</li>\n<li>Sass</li>\n<li>JavaScript</li>\n</ul></li>\n</ol>\n<h2>注释</h2>\n<p>应用场景：</p>\n<ol>\n<li>模块描述</li>\n<li>函数方法</li>\n<li>大段代码</li>\n<li>复杂算法</li>\n<li>Hack</li>\n</ol>\n<p>文档化：</p>\n<p>按照文档规范来书写易于阅读，且能被机器解读的注释，配合使用对应的预处理器，可以自动生成文档。</p>\n<ul>\n<li>KSS</li>\n<li>JSDoc</li>\n<li>TomDoc</li>\n</ul>\n<p>风格：</p>\n<p>comment.html</p>\n<pre><code class=\"language-html\">&#x3C;header>\n&#x3C;/header> &#x3C;!-- / header -->\n\n&#x3C;div id=\"wrapper\">\n&#x3C;/div> &#x3C;!-- / #wrapper -->\n\n&#x3C;div class=\"module\">\n&#x3C;/div> &#x3C;!-- / .module -->\n</code></pre>\n<p>comment.css</p>\n<pre><code class=\"language-css\">/* ==========================================================================\n   区块注释段\n   ========================================================================== */\n\n/* 子区块注释段\n   -------------------------------------------------------------------------- */\n\n/**\n * 分组注释段\n * 用于多行的释义或文档。\n * 1. 注释1。\n * 2. 注释2。\n */\n\n.selector {\n  property1: value1;  /* 1 */\n  property2: value2;  /* 2 */\n}\n\n/* 基本注释 */\n</code></pre>\n<p>comment.scss</p>\n<pre><code class=\"language-scss\">// ==========================================================================\n// 区块注释段\n// ==========================================================================\n\n// 子区块注释段\n// --------------------------------------------------------------------------\n\n//\n// 分组注释段\n// 用于多行的释义或文档。\n//\n\n// 基本注释\n</code></pre>\n<p>component.scss</p>\n<pre><code class=\"language-scss\">// A button suitable for giving a star to someone.\n// Experimental: An alternative signup button styling used in AB Test #195.\n// Deprecated: Styling for legacy wikis. We'll drop support for these wikis on\n// July 13, 2007.\n//\n// :hover             - Subtle hover highlight.\n// .star-given        - A highlight indicating you've already given a star.\n// .star-given:hover  - Subtle hover highlight on top of star-given styling.\n// .disabled          - Dims the button to indicate it cannot be used.\n//\n// Compatible in IE6+, Firefox 2+, Safari 4+.\n// Compatibility untested.\n//\n// Styleguide 2.1.3.\n// No styleguide reference.\n</code></pre>\n<p>mixin.scss</p>\n<pre><code class=\"language-scss\">// Creates a linear gradient background, from top to bottom.\n//\n// $start - The color hex at the top.\n// $end   - The color hex at the bottom.\n</code></pre>\n<p>comment.js</p>\n<pre><code class=\"language-js\">/* ==========================================================================\n   区块注释段\n   ========================================================================== */\n\n/* 子区块注释段\n   -------------------------------------------------------------------------- */\n\n/**\n * 模块简介\n *\n * 具体细节\n *\n * @param    {string}  args1  参数 1。\n * @param    {array}   args2  参数 2。\n * @returns  void\n */\n</code></pre>\n<h2>UI 组件设计模式</h2>\n<p>相对于以页面为单位的开发方式，建议以构建组件系统的方式来开发。</p>\n<ul>\n<li>Atomic Design</li>\n<li>BEM</li>\n<li>OOCSS</li>\n<li>SMACSS</li>\n</ul>\n<p>为了合理划分组件并分离内容、样式、行为，建议采用如下设计模式。</p>\n<p>原子 － 分子 － 组织 － 模版 － 页面</p>\n<h3>HTML（语义）</h3>\n<p>class 区分 UI 与业务，使用attribute加强语义与配置行为。</p>\n<pre><code class=\"language-html\">&#x3C;div class=\"model component\" attribute=\"value\" data-attribute=\"value\">\n  &#x3C;div class=\"component-descendant\">\n    ...\n  &#x3C;/div>\n&#x3C;/div>&#x3C;!-- / .component -->\n    \n&#x3C;div class=\"component--modifier\" data-attribute=\"value\">\n  &#x3C;div class=\"component-descendant is-state\">\n    ...\n  &#x3C;/div>\n&#x3C;/div>&#x3C;!-- / .component--modifier -->\n</code></pre>\n<h3>CSS（组件）</h3>\n<p>规则书写</p>\n<ol>\n<li>Layout: The position of the element in space. Eg.: position, top, z-index.</li>\n<li>Box: The element itself. Eg.: display, overflow, box-sizing.</li>\n<li>Visual: Design of the element. Eg.: color, border, background.</li>\n<li>Type: Typesetting of the element. Eg.: font-family, text-transform.</li>\n</ol>\n<p>模块分组</p>\n<pre><code>Abstracts ----------- 抽象\n  ├── Variables ----- 变量\n  |   └── Palette --- 调色盘\n  ├── Functions ----- 函数\n  ├── Mixins -------- 混合宏\n  └── Placeholders -- 占位符\nVendors ------------- 第三方框架、库、插件\nNormalize ----------- 标准化\nTypography ---------- 文本版式\nIcons --------------- 图标\nLayout -------------- 布局规则\nComponents ---------- UI 组件\nThemes -------------- 主题风格\nHelpers ------------- 辅助工具\n[Pages] ------------- 页面专属样式\n[Print] ------------- 打印样式\n[Shame] ------------- 补丁\n</code></pre>\n<p>变量命名</p>\n<p><code>&#x3C;property>-&#x3C;value>[--componentName]</code></p>\n<p>模块</p>\n<p>命名</p>\n<p><code>&#x3C;component>[-descendant|--modifier]</code></p>\n<pre><code>.component ------------------------------- 组件\n.component-descendant -------------------- 组件子模块\n.component--modifier --------------------- 组件派生类\n.is-state -------------------------------- 组件状态\n.u-util ---------------------------------- 工具\n.js-hook --------------------------------- JavaScript 专属钩子\n.shame-classname ------------------------- 补丁\n</code></pre>\n<p>代码组织</p>\n<pre><code class=\"language-scss\">%model {\n    // minimum equipment\n    \n    .model-descendant {}\n}\n    \n.model {\n    @extend %model;\n    \n  .model-descendant {}\n}\n    \n.model--modifier {\n    @extend %model;\n    \n    .model-descendant {}\n}\n    \n.page--model {}\n    \n.page--model-descendant {}\n</code></pre>\n<p>注解：</p>\n<ul>\n<li>尽量降低选择器的优先级。</li>\n<li>如果 HTML 结构明确，可直接使用元素选择器。</li>\n<li>组件中的行为可以依赖于组件结构。而不同组件拥有相同行为时，可以将 JavaScript 绑定到 .js-hook 上。</li>\n<li>shame 补丁样式集中存放，详细注释并定期修复。</li>\n<li>由于 IE 6 不支持部分常用选择器（如：子选择器.foo > .bar，链式选择器 .foo.bar 等），导致无法使用 .component-descendant.is-state，因此采用.is-component-descendant-state命名约定来弥补不足。</li>\n</ul>\n<h3>JavaScript（事件流）</h3>\n<p>随着用户体验的不断改善，JavaScript 代码的规模也会不断增加，因此建议一开始就进行基本的模块管理，或者使用框架、库来组织代码。</p>\n<h4>Web Site</h4>\n<p>模块分组</p>\n<pre><code>Vendor ----------------------------------- 第三方框架、库、插件\nUtil ------------------------------------- 通用工具\nBase ------------------------------------- 应用初始化\nCommon ----------------------------------- 全局属性与方法\nComponent -------------------------------- 通用 UI 组件\nBusiness Logic --------------------------- 应用业务逻辑\nMain ------------------------------------- 全局执行代码\nEntry ------------------------------------ 各页面入口\n</code></pre>\n<p>注解：</p>\n<ul>\n<li>Component 完全脱离 Business Logic，并且推荐开源 Component。</li>\n</ul>\n<p>模块实现</p>\n<pre><code class=\"language-js\">/**\n * @desc Module Organization\n * @see  http://pinkyjie.com/2013/12/18/rock-your-web-page-in-bakcbone-way/\n */\n\n// Base\n(function(root, $) {\n  root.App = {\n    view: {}\n  };\n\n  root.$document = $(document);\n  root.$window   = $(window);\n\n  root.EventBus = {\n    trigger: function(event, data) {\n      var e = $.Event(event);\n      e.param = data;\n      $document.trigger(e);\n    },\n\n    on: function(event, callback) {\n      $document.on(event, callback);\n    },\n\n    off: function(event) {\n      $document.off(event);\n    }\n  };\n}(this, jQuery));\n\n\n// Common\n\n\n// Util\n(function(exports, $) {\n  // TODO\n  exports.extend = function() {};\n}(App, jQuery));\n\n\n// Component\n(function(exports, $) {\n  var component = function(element) {\n    this.$el = $(element);\n    this.model = null;\n\n    // TODO\n    _.bindAll(this, 'submit', 'create', 'destroy');\n\n    // 模块内部的交互使用事件委托\n    this.$el\n      .on('submit', 'form', this.submit);\n\n    // 模块与模块之间的交互使用观察者模式\n    EventBus\n      .on('Component:create', this.create)\n      .on('Component:destroy', this.destroy);\n  };\n\n  // TODO\n  _.extend(component.prototype, {\n    render: function() {\n      this.reset();\n      console.log('render');\n    },\n\n    reset: function() {\n      console.log('reset');\n    },\n\n    submit: function() {\n      console.log('submit');\n    },\n\n    create: function(event) {\n      console.log('create');\n    },\n\n    destroy: function(event) {\n      console.log('destroy');\n    }\n  });\n\n  exports.view.component = component;\n}(App, jQuery));\n\n\n// Main\n(function(exports, $) {\n  exports.InitPage = function() {\n    var componentView = new exports.view.component('.component');\n    componentView.render();\n  };\n}(App, jQuery));\n\n// Execution\n// 在 HTML 模板中调用。\n// 之前的模块大部分都是声明，耗时较少。代码只在对应的模板中运行。\nApp.InitPage();\n</code></pre>\n<p>模块管理</p>\n<p>使用 AMD、CommonJS 及 ES Harmony 编写模块化的 JavaScript。</p>\n<h4>Web App</h4>\n<p>@TODO</p>\n<p>模块通用化</p>\n<p>在满足应用本身的需求之后，建议将模块从应用中解耦出来，方便集成到其他应用。</p>\n<p>jQuery 插件</p>\n<pre><code class=\"language-js\">/**\n * @desc jQuery 插件设计模式 - Data API\n * @see  Bootstrap\n */\n\n(function($) {\n\n  // Module Public Class Definition\n  // ==============================\n\n  var Module = function(element, options) {\n    this.$element = $(element);\n    this.options  = options;\n  };\n\n  Module.prototype.method = function() {\n    // do something...\n  };\n\n  // Module Default Options\n\n  Module.DEFAULTS = {\n    'key': 'value'\n  };\n\n\n  // Module jQuery Plugin Definition\n  // ===============================\n\n  var old = $.fn.module;\n\n  $.fn.module = function(option) {\n    return this.each(function() {\n      var $this   = $(this),\n          data    = $this.data('module'),\n          options = $.extend(\n            {},\n            Module.DEFAULTS,\n            $this.data(),\n            typeof option == 'object' &#x26;&#x26; option\n          );\n\n      if (!data) $this.data('module', (data = new Module(this, options)));\n      if (typeof option == 'string') data[option]();\n    });\n  };\n\n  $.fn.module.Constructor = Module;\n\n\n  // Module No Conflict\n  // ==================\n\n  $.fn.module.noConflict = function() {\n    $.fn.module = old;\n    return this;\n  };\n\n\n  // Module Data-API\n  // ===============\n\n  $(document).on('event.module.data-api', '[data-toggle=\"module\"]', function(e) {\n    e.preventDefault();\n\n    $(this).module('method');\n    // do something...\n  });\n\n})(jQuery);\n</code></pre>\n<h4>其他</h4>\n<p>省略行末分号</p>\n<p>如果下一行的第一个token是 ( , [ , / , + , - 这五个字符之一的话，JavaScript 将不会自动在上一行句尾加上分号。所以注意这类情况。</p>\n","ogImage":{"url":""}}},"__N_SSG":true}